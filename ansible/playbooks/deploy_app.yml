---
# One-time setup tasks
- name: DEPLOY -> Prepare deployment
  hosts: app,staging
  gather_facts: false
  vars_files:
    - ../env_vars/base.yml
  vars:
    newsblur_repo_path: "{{ playbook_dir }}/../.."

  tasks:
    - name: Update Sentry release
      connection: local
      run_once: yes
      shell: >
        curl {{ sentry_web_release_webhook }}/ \
        -X POST \
        -H 'Content-Type: application/json' \
        -d '{"version": "{{ lookup('pipe', 'date "+%Y-%m-%d %H:%M:%S"') }}"}'

    - name: Cleanup static assets before compression
      run_once: yes
      connection: local
      file:
        state: absent
        path: "{{ newsblur_repo_path }}/static"
      tags:
        - never
        - static

    - name: Updating NewsBlur Deploy container
      run_once: yes
      connection: local
      command: chdir={{ newsblur_repo_path }} docker pull newsblur/newsblur_deploy
      tags:
        - never
        - static

    - name: Compressing JS/CSS assets
      run_once: yes
      connection: local
      command: chdir={{ newsblur_repo_path }} docker run --rm -v {{ newsblur_repo_path }}:/srv/newsblur newsblur/newsblur_deploy
      tags:
        - never
        - static

    - name: Archive JS/CSS assets for uploading
      run_once: yes
      connection: local
      archive:
        path: "{{ newsblur_repo_path }}/static/"
        dest: "{{ newsblur_repo_path }}/static.tgz"
      tags:
        - never
        - static

    - name: Ensure AWS dependencies installed
      run_once: yes
      connection: local
      pip:
        name:
          - boto3
          - botocore
          - packaging
        virtualenv: ~/.virtualenvs/newsblur
      tags:
        - never
        - static

    - name: Uploading JS/CSS assets to S3
      run_once: yes
      connection: local
      amazon.aws.aws_s3:
        bucket: newsblur-backups
        object: static_py3.tgz
        src: "{{ newsblur_repo_path }}/static.tgz"
        mode: put
        overwrite: different
        aws_access_key: "{{ lookup('ini', 'aws_access_key_id section=default file=/srv/secrets-newsblur/keys/aws.s3.token') }}"
        aws_secret_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=/srv/secrets-newsblur/keys/aws.s3.token') }}"
        endpoint_url: "https://s3.us-east-1.amazonaws.com"
      tags:
        - never
        - static

# Deploy Group A (odd servers)
- name: DEPLOY -> app Group A (odd servers)
  hosts: hdjango_a:hrefresh_a:hcount_a:hpush_a:staging_a
  gather_facts: false
  vars_files:
    - ../env_vars/base.yml
    - roles/letsencrypt/defaults/main.yml
  vars:
    haproxy_host: "{{ 'hstaging' if 'staging' in inventory_hostname else 'hwww' }}"
    group_name: A
  tasks:
    - include_tasks: deploy_app_group.yml
    - include_tasks: deploy_app_group_static.yml
      tags:
        - never
        - static

# Deploy Group B (even servers)
- name: DEPLOY -> app Group B (even servers)
  hosts: hdjango_b:hrefresh_b:hcount_b:hpush_b:staging_b
  gather_facts: false
  vars_files:
    - ../env_vars/base.yml
    - roles/letsencrypt/defaults/main.yml
  vars:
    haproxy_host: "{{ 'hstaging' if 'staging' in inventory_hostname else 'hwww' }}"
    group_name: B
  tasks:
    - include_tasks: deploy_app_group.yml
    - include_tasks: deploy_app_group_static.yml
      tags:
        - never
        - static

# Maintenance mode tasks
- name: Maintenance mode management
  hosts: app,staging
  gather_facts: false
  tasks:
    - name: Entering maintenance mode
      template:
        src: /srv/newsblur/templates/maintenance_off.html
        dest: /srv/newsblur/templates/maintenance_on.html
      tags:
        - never
        - maintenance_on

    - name: Leaving maintenance mode
      file:
        path: /srv/newsblur/templates/maintenance_on.html
        state: absent
      tags:
        - never
        - maintenance_off
